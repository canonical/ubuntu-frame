#!/bin/bash
set -euo pipefail

config_changes=0
display_file="$SNAP_DATA/frame.display"
config_file="$SNAP_DATA/frame.config"

# display_file
# A display configuration can be supplied through the display option
display_option="$(snapctl get display)"
if [ -n "${display_option}" ]
then
  display_temp="$(mktemp)"
  cat <<EOT > "${display_temp}"
# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
# USE 'snap set $SNAP_INSTANCE_NAME display=...' INSTEAD

${display_option}
EOT
  if ! diff "${display_temp}" "${display_file}" > /dev/null; then
    mv "${display_file}"  "${display_file}.save" || true
    mv "${display_temp}" "${display_file}"
    chmod a+r "${display_file}"
    let config_changes+=1
  else
    rm "${display_temp}"
  fi
else
  mv "${display_file}"  "${display_file}.save" || true
fi

# config_file
# Configuration can be supplied through the config option
config_option="$(snapctl get config)"
config_temp="$(mktemp)"
cat <<EOT > "${config_temp}"
# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
# USE 'snap set $SNAP_INSTANCE_NAME config=...' INSTEAD

# ** Options supplied through config (begin) **
${config_option:-# (none)}
# ** Options supplied through config (end) **
EOT

config_entry() {
  if ! grep -q "^$1=" "${config_temp}"; then
    cat <<EOT >> "${config_temp}"

# $3
$1=$2
EOT
  fi
}

if grep -q snap_core= /proc/cmdline && grep -q vt.handoff= /proc/cmdline
then
  cat <<EOT >> "${config_temp}"

# WORKAROUND: On Ubuntu Core, if 'vt.handoff' is set, Mir can only start with vt=0.
# The correct fix is: https://github.com/snapcore/pi-gadget/pull/12
vt=0
EOT
fi


if [ -f "$SNAP/graphics/etc/mir-quirks" ]
then
  cat "$SNAP/graphics/etc/mir-quirks" >> "${config_temp}"
fi

# Fill in defaults for any options not already supplied
config_entry "console-provider"   "vt"                                  "Required to run as daemon"
config_entry "vt"                 "4"                                   "Virtual terminal to use for display (0 to use current)"
config_entry "cursor"             "auto"                                "Mouse pointer to use (auto|null|software)"
config_entry "env-hacks"          "MIR_MESA_KMS_DISABLE_MODESET_PROBE"  "As Frame HAS to run mesa-kms we can safely override the probe for KMS everywhere"
config_entry "x11-window-title"   "Ubuntu Frame"                        "Default window title when run as Mir on X"
config_entry "driver-quirks"      "skip:driver:nvidia"                  "Do not attempt to use Nvidia driver with gbm-kms"

if [ -e /sys/kernel/security/apparmor/profiles ]; then
  config_entry "authorise-without-apparmor" "false"                     "System has AppArmor, try to use it"
else
  config_entry "authorise-without-apparmor" "true"                      "System missing AppArmor, use (less secure) fallback authorisation logic"
fi

if ! diff "${config_temp}" "${config_file}" > /dev/null; then
  mv "${config_file}"  "${config_file}.save" || true
  mv "${config_temp}" "${config_file}"
  chmod a+r "${config_file}"
  let config_changes+=1
else
  rm "${config_temp}"
fi

# (Re)start the daemon
if [ "$(snapctl get daemon)" = "true" ]; then
  if snapctl services "$SNAP_INSTANCE_NAME.daemon" | grep -q inactive; then
    snapctl start --enable "$SNAP_INSTANCE_NAME.daemon" 2>&1 || true
  elif [ "$config_changes" -gt 0 ]; then
    snapctl restart "$SNAP_INSTANCE_NAME.daemon" || true
  fi
else
  snapctl stop --disable "$SNAP_INSTANCE_NAME.daemon" 2>&1 || true
fi
